AWSTemplateFormatVersion: '2010-09-09'
Description: 'GBT Application - Simple Interview Demo'

Parameters:
  EnvironmentName:
    Type: String
    Default: prod
    Description: Environment name

  AppName:
    Type: String
    Default: gbt-application
    Description: Application name

  MongoDBUri:
    Type: String
    Description: MongoDB connection string
    Default: 'mongodb+srv://demo:demo123@cluster0.mongodb.net/gbt?retryWrites=true&w=majority'

  DBUser:
    Type: String
    Description: DocumentDB master username
    Default: usermongo

  DBPassword:
    Type: String
    Description: DocumentDB master password
    NoEcho: true
    MinLength: 8

Resources:
  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref AppName
      ImageScanningConfiguration:
        ScanOnPush: false
      ImageTagMutability: MUTABLE

  # CloudWatch Logs
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AppName}-${EnvironmentName}'
      RetentionInDays: 7

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AppName}-${EnvironmentName}-cluster'

  # IAM Role para ECS Tasks
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-${EnvironmentName}-execution-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Obtener VPC por defecto
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.31.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-vpc'

  # Crear subnets en la VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: '172.31.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: '172.31.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-subnet-2'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DefaultVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DefaultVPC
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for DocumentDB
  DocDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AppName}-${EnvironmentName}-docdb-sg'
      GroupDescription: 'Security group for DocumentDB cluster'
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref SecurityGroup

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AppName}-${EnvironmentName}-sg'
      GroupDescription: Security group for GBT application
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: HTTP access

  # DocumentDB Subnet Group
  DocDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for DocumentDB'
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # DocumentDB Cluster
  DocDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${AppName}-${EnvironmentName}-cluster'
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DocDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DocDBSecurityGroup

  # DocumentDB Instance
  DocDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      DBClusterIdentifier: !Ref DocDBCluster
      DBInstanceIdentifier: !Sub '${AppName}-${EnvironmentName}-instance'

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AppName}-${EnvironmentName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub '${AppName}-container'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: aws
            - Name: SPRING_DATA_MONGODB_URI
              Value: !Sub 'mongodb://${DBUser}:${DBPassword}@${DocDBCluster.Endpoint}:27017/gbt?ssl=true&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Service (comenzar con 0 tareas)
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AppName}-${EnvironmentName}-service'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

Outputs:
  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
    Export:
      Name: !Sub '${AppName}-${EnvironmentName}-ECRRepositoryURI'

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AppName}-${EnvironmentName}-ECSClusterName'

  ECSServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${AppName}-${EnvironmentName}-ECSServiceName'

  VpcId:
    Description: VPC ID
    Value: !Ref DefaultVPC
    Export:
      Name: !Sub '${AppName}-${EnvironmentName}-VpcId'

  DocDBEndpoint:
    Description: DocumentDB Cluster Endpoint
    Value: !GetAtt DocDBCluster.Endpoint
    Export:
      Name: !Sub '${AppName}-${EnvironmentName}-DocDBEndpoint'